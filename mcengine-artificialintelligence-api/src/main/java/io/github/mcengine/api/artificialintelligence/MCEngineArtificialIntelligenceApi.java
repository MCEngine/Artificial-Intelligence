package io.github.mcengine.api.artificialintelligence;

import io.github.mcengine.api.artificialintelligence.FunctionCallingLoader;
import io.github.mcengine.api.artificialintelligence.model.*;

import java.io.File;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Logger;

import org.bukkit.plugin.Plugin;

public class MCEngineArtificialIntelligenceApi {

    private final IMCEngineArtificialIntelligenceApi ai;
    private final FunctionCallingLoader functionCallingLoader;

    public MCEngineArtificialIntelligenceApi(Plugin plugin) {
        // Load AI model
        String aiType = plugin.getConfig().getString("ai.type", "deepseek");
        switch (aiType.toLowerCase()) {
            case "custom" -> this.ai = new MCEngineArtificialIntelligenceApiCustomUrl(plugin);
            case "deepseek" -> this.ai = new MCEngineArtificialIntelligenceApiDeepSeek(plugin);
            case "openai" -> this.ai = new MCEngineArtificialIntelligenceApiOpenAi(plugin);
            case "openrouter" -> this.ai = new MCEngineArtificialIntelligenceApiOpenRouter(plugin);
            default -> throw new IllegalArgumentException("Unsupported AI type: " + aiType);
        }

        // Load FunctionCallingLoader for addon support
        this.functionCallingLoader = new FunctionCallingLoader(plugin);
    }

    /**
     * Sends a message to the AI and returns the AI's response.
     *
     * @param message The message or prompt to send to the AI.
     * @return The response generated by the AI model.
     */
    public String getResponse(String message) {
        return ai.getResponse(message);
    }

    public FunctionCallingLoader getFunctionCallingLoader() {
        return this.functionCallingLoader;
    }

    private void loadAddons(Plugin plugin) {
        Logger logger = plugin.getLogger();
        File addonsFolder = new File(plugin.getDataFolder(), "addons");

        if (!addonsFolder.exists() && !addonsFolder.mkdirs()) {
            logger.warning("Could not create addons directory.");
            return;
        }

        File[] files = addonsFolder.listFiles((f) -> f.isFile() && f.getName().endsWith(".jar"));
        if (files == null || files.length == 0) {
            logger.info("No addons found.");
            return;
        }

        for (File file : files) {
            try (URLClassLoader cl = new URLClassLoader(new URL[]{file.toURI().toURL()}, this.getClass().getClassLoader());
                 JarFile jar = new JarFile(file)) {

                Enumeration<JarEntry> entries = jar.entries();
                while (entries.hasMoreElements()) {
                    JarEntry entry = entries.nextElement();
                    String name = entry.getName();

                    if (!name.endsWith(".class") || name.contains("$")) continue;

                    String className = name.replace("/", ".").replace(".class", "");

                    try {
                        Class<?> clazz = cl.loadClass(className);

                        Method onLoadMethod = null;
                        try {
                            onLoadMethod = clazz.getMethod("onLoad", MCEngineArtificialIntelligenceApi.class);
                        } catch (NoSuchMethodException ignored) {
                        }

                        if (onLoadMethod != null && !clazz.isInterface() && !java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())) {
                            Object instance = clazz.getDeclaredConstructor().newInstance();
                            onLoadMethod.invoke(instance, this);
                            logger.info("Addon loaded: " + className);
                        }

                    } catch (Throwable e) {
                        logger.warning("Failed to load class from addon: " + className);
                    }
                }
            } catch (Exception e) {
                logger.warning("Error loading addon JAR: " + file.getName());
                e.printStackTrace();
            }
        }
    }
}
