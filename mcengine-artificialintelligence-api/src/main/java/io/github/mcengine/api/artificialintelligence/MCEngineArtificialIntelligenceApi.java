package io.github.mcengine.api.artificialintelligence;

import io.github.mcengine.api.artificialintelligence.model.MCEngineArtificialIntelligenceApiCustomUrl;
import io.github.mcengine.api.artificialintelligence.model.MCEngineArtificialIntelligenceApiDeepSeek;
import io.github.mcengine.api.artificialintelligence.model.MCEngineArtificialIntelligenceApiOpenAi;
import io.github.mcengine.api.artificialintelligence.model.MCEngineArtificialIntelligenceApiOpenRouter;
import io.github.mcengine.api.artificialintelligence.util.MCEngineArtificialIntelligenceApiUtil;

import org.bukkit.plugin.Plugin;

/**
 * This class acts as a central access point for the MCEngine Artificial Intelligence API.
 * It initializes and interacts with the AI model based on the plugin configuration.
 */
public class MCEngineArtificialIntelligenceApi {

    /** Utility logger for logging information, warnings, and errors. */
    private final MCEngineArtificialIntelligenceApiUtil logger;

    /** Interface for AI model interaction. */
    private final IMCEngineArtificialIntelligenceApi ai;

    /**
     * Constructs the AI API with the specified plugin context.
     * It reads the AI type from the plugin config and initializes the corresponding model.
     *
     * @param plugin The plugin instance that is using this API.
     * @throws IllegalArgumentException If the configured AI type is not supported.
     */
    public MCEngineArtificialIntelligenceApi(Plugin plugin) {
        this.logger = new MCEngineArtificialIntelligenceApiUtil(plugin.getLogger());
        String aiType = plugin.getConfig().getString("aiType", "deepseek");

        switch (aiType.toLowerCase()) {
            case "custom":
                this.ai = new MCEngineArtificialIntelligenceApiCustomUrl(plugin);
                break;
            case "deepseek":
                this.ai = new MCEngineArtificialIntelligenceApiDeepSeek(plugin);
                break;
            case "openai":
                this.ai = new MCEngineArtificialIntelligenceApiOpenAi(plugin);
                break;
            case "openrouter":
                this.ai = new MCEngineArtificialIntelligenceApiOpenRouter(plugin);
                break;
            default:
                throw new IllegalArgumentException("Unsupported AI type: " + aiType);
        }
    }

    /**
     * Sends a message to the AI and returns the AI's response.
     *
     * @param message The message or prompt to send to the AI.
     * @return The response generated by the AI model.
     */
    public String getResponse(String message) {
        return ai.getResponse(message);
    }

    /**
     * Logs an informational message through the internal logger.
     *
     * @param message The message to log.
     */
    public void info(String message) {
        logger.info(message);
    }

    /**
     * Logs a warning message through the internal logger.
     *
     * @param message The message to log.
     */
    public void warn(String message) {
        logger.warn(message);
    }

    /**
     * Logs an error message through the internal logger.
     *
     * @param message The message to log.
     */
    public void error(String message) {
        logger.error(message);
    }
}
